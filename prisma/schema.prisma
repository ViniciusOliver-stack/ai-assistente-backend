generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String          @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  planId                   String?
  totalTeams               Int             @default(0)
  totalMembers             Int             @default(0)
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  trialEndDate             DateTime?
  trialStartDate           DateTime?
  setupCompleted           Boolean         @default(false)
  password                 String
  metadata                 Json?
  accounts                 Account[]
  Authenticator            Authenticator[]
  sessions                 Session[]
  Team                     Team[]
  TeamMembers              TeamMember[]
  plan                     Plan?           @relation(fields: [planId], references: [id])
  Memory                   Memory[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Team {
  id               String             @id @default(cuid())
  name             String
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ownerId          String?
  agents           Agent[]
  apiKeys          ApiKey[]
  Assistant        Assistant[]
  owner            User?              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members          TeamMember[]
  WhatsAppInstance WhatsAppInstance[]
  Memory           Memory[]
}

model TeamMember {
  id       String   @id @default(cuid())
  role     String
  joinedAt DateTime @default(now())
  userId   String
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Agent {
  id                       String             @id @default(cuid())
  title                    String?
  description              String?
  enterprise               String?
  providerModel            String?
  temperature              Float?
  limitToken               Float?
  restrictionContent       Boolean?
  languageDetector         Boolean?
  prompt                   String?
  teamId                   String
  tokenId                  String?
  provider                 String             @default("OPENAI")
  useLangChain             Boolean            @default(false)
  audioTranscription       Boolean            @default(true) // Nova propriedade
  audioMessageDisabled     String? // Mensagem quando a transcrição estiver desabilitada
  groqAudioTranscription   Boolean            @default(false)
  groqAudioApiKeyId        String?
  groqAudioMessageDisabled String?
  team                     Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  token                    ApiKey?            @relation(fields: [tokenId], references: [id])
  WhatsAppInstance         WhatsAppInstance[]
}

model Plan {
  id                String   @id @default(cuid())
  name              String   @unique
  maxTeams          Int
  maxMembersPerTeam Int
  price             Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  stripePriceId     String?  @unique
  User              User[]
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String
  provider    String
  description String?
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agents      Agent[]
  team        Team     @relation(fields: [teamId], references: [id])
}

model WhatsAppInstance {
  id           String   @id @default(cuid())
  instanceName String   @unique
  displayName  String?
  instanceId   String   @unique
  status       String
  apiKey       String?
  integration  String
  serverUrl    String
  webhookUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teamId       String
  agentId      String
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([instanceId, teamId, agentId])
  @@index([teamId])
  @@index([agentId])
}

model PromptModels {
  id        String   @id @default(uuid())
  prompt    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agentName String
}

model Conversation {
  id               String                    @id @default(uuid())
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  status           ConversationStatus        @default(OPEN)
  ticketNumber     String?                   @unique
  priority         TicketPriority?
  closedAt         DateTime?
  closedBy         String?
  reopenCount      Int                       @default(0)
  lastActivity     DateTime                  @default(now())
  metadata         Json?
  instanceWhatsApp String?
  isAIEnabled      Boolean                   @default(true)
  participants     ConversationParticipant[]
  messages         Message[]
  Thread           Thread?
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String
  participantId  String
  role           String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, participantId])
}

model Message {
  id             String        @id @default(uuid())
  conversationId String?
  text           String
  sender         String
  recipientId    String
  timestamp      DateTime      @default(now())
  messageType    String        @default("text")
  status         String        @default("sent")
  hasAudio       Boolean       @default(false)
  isTranscribed  Boolean       @default(false)
  audioUrl       String?
  transcription  String?
  metadata       Json?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

  @@index([conversationId, timestamp])
}

model Assistant {
  id           String   @id @default(cuid())
  assistantId  String   @unique
  name         String
  instructions String
  model        String   @default("gpt-4-turbo-preview")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teamId       String
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  threads      Thread[]
}

model Thread {
  id             String       @id @default(cuid())
  threadId       String       @unique
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  status         String       @default("active")
  assistantId    String
  conversationId String       @unique
  assistant      Assistant    @relation(fields: [assistantId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([threadId])
}

model Memory {
  id         String   @id @default(cuid())
  userId     String
  teamId     String
  metadata   Json?
  embeddings Json?
  buffer     Json?
  summary    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@index([userId, teamId])
  @@index([embeddings])
}

enum ConversationStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  RESOLVED
  WAITING_USER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
