# Exemplo de arquivo de variáveis de ambiente para ai-assistente-backend
# Copie este arquivo para `.env` e preencha os valores reais.

# Porta em que o servidor irá escutar (opcional, default: 3001)
PORT=3001

# URL do frontend (CORS) - utilizado pelo Socket.IO
FRONTEND_URL=https://seu-frontend.exemplo.com

# URL de conexão do banco de dados (Prisma) - ex: postgres://user:pass@host:5432/dbname
DATABASE_URL=postgresql://user:password@localhost:5432/your_database

# --- Sugestões para keys que atualmente são lidas do banco ou estão hardcoded ---
# Algumas integrações usam chaves vindas do banco (ex.: agent.token.key). Porém existem
# ocorrências de chaves hardcoded no código que você deve substituir por variáveis de
# ambiente para maior segurança. Abaixo seguem nomes sugeridos (opcionais):

# Chave para as requisições externas ao serviço "evolution.rubnik.com" (recomendado)
# Substituir usos hardcoded de 'apikey' no código por process.env.EVOLUTION_API_KEY
EVOLUTION_API_KEY=seu_evolution_apikey_aqui

# Chave padrão para OpenAI (caso queira usar uma chave global como fallback)
OPENAI_API_KEY=sua_openai_api_key_aqui

# Chave padrão para GROQ (transcrição de áudio) — útil como fallback
GROQ_API_KEY=sua_groq_api_key_aqui

# Observações:
# - O código atual usa tokens armazenados no banco (prisma.whatsAppInstance.agent.token.key)
#   para inicializar provedores AI (OPENAI/GROQ). Se preferir manter esse fluxo, não
#   é necessário preencher OPENAI_API_KEY/GROQ_API_KEY; caso contrário, implemente um
#   fallback no código que use essas variáveis de ambiente.
# - Há um valor sensível hardcoded encontrado em:
#     src/services/externalWebSocket.ts (campo 'apikey' com valor qbTMAT9b...)
#     src/services/aiService.ts (enviar mensagem externa: apikey: "qbTMAT9b...")
#   Recomendo remover esse valor do código e usar EVOLUTION_API_KEY.
# - Depois de criar o arquivo `.env`, reinicie o servidor para que o dotenv carregue
#   as novas variáveis.

# Fique à vontade para adicionar outras variáveis de ambiente específicas do seu
# ambiente (ex.: NODE_ENV=production, SENTRY_DSN, REDIS_URL, etc.) conforme necessário.
